---
import Layout from '../layouts/Layout.astro';
import { getCollection } from 'astro:content';

const projects = await getCollection('projects');
const sortedProjects = projects.sort((a, b) => a.data.order - b.data.order);
---

<script>
  // Dynamically import Mermaid utilities only when needed
  let mermaidLoaded = false;

  const loadMermaid = async () => {
    if (mermaidLoaded) return;
    mermaidLoaded = true;

    const { initMermaid, refreshMermaid } = await import('../utils/mermaid');
    await initMermaid();
    await refreshMermaid();

    // Re-render mermaid diagrams when theme changes
    const themeObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class') {
          refreshMermaid();
        }
      });
    });

    themeObserver.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class'],
    });
  };

  // Use Intersection Observer to load Mermaid only when diagrams are visible
  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        loadMermaid();
        observer.disconnect();
      }
    });
  }, { rootMargin: '100px' });

  // Wait for DOM and observe first mermaid diagram
  document.addEventListener('DOMContentLoaded', () => {
    const firstDiagram = document.querySelector('.mermaid');
    if (firstDiagram) {
      observer.observe(firstDiagram);
    }
  });
</script>

<Layout title="Projects â€” Chris Lyons" description="A showcase of development projects, architectural solutions, and open source contributions.">
  <div class="section-container">
    <h1 class="page-title mb-4">Projects</h1>
    <p class="text-xl text-gray-600 dark:text-gray-400 mb-12">
      A selection of work showcasing technical depth and product thinking.
    </p>

    <div class="space-y-8">
      {sortedProjects.map(async (project) => {
        const { Content } = await project.render();
        return (
          <article class={`p-6 rounded-lg border transition-all hover:shadow-lg ${
            project.data.featured
              ? 'bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 border-blue-200 dark:border-blue-800'
              : 'bg-white dark:bg-gray-900 border-gray-200 dark:border-gray-800'
          }`}>
            <div class="flex items-start justify-between mb-3">
              <h2 class="text-2xl font-bold">{project.data.title}</h2>
              {project.data.featured && (
                <span class="px-3 py-1 bg-blue-600 text-white text-sm rounded-full">Featured</span>
              )}
            </div>
            <p class="text-gray-700 dark:text-gray-300 mb-4">
              {project.data.description}
            </p>
            <div class="flex flex-wrap gap-2 mb-4">
              {project.data.tech.map((tech) => (
                <span class="px-3 py-1 bg-gray-200 dark:bg-gray-800 text-sm rounded-md">
                  {tech}
                </span>
              ))}
            </div>
            {project.body && (
              <div class="prose prose-sm dark:prose-invert max-w-none mt-4 pt-4 border-t border-gray-200 dark:border-gray-800">
                <Content />
              </div>
            )}
          </article>
        );
      })}
    </div>

    <div class="mt-16 p-8 bg-gray-50 dark:bg-gray-900/50 rounded-lg border border-gray-200 dark:border-gray-800 text-center">
      <h2 class="text-2xl font-bold mb-4">Want to See More?</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        These are just highlights. I'm always working on something new.
      </p>
      <a href="/contact" class="inline-block btn-primary">Get in Touch</a>
    </div>
  </div>
</Layout>
