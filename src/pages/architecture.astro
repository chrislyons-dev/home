---
import Layout from '../layouts/Layout.astro';
import PlantUMLDiagram from '../components/PlantUMLDiagram';

// Import example diagrams at build time
import microservicesDiagram from '../../docs/architecture/examples/microservices.mmd?raw';
import dataPipelineDiagram from '../../docs/architecture/examples/data-pipeline.mmd?raw';
import orderServiceDiagram from '../../docs/architecture/examples/order-service.puml?raw';
---

<Layout title="Architecture ‚Äî Chris Lyons" description="Architecture as code examples using Mermaid and PlantUML diagrams that live with the system.">
  <div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-20">
    <h1 class="text-4xl sm:text-5xl font-bold mb-4">Architecture as Code</h1>
    <p class="text-xl text-gray-600 dark:text-gray-400 mb-12">
      Living documentation that evolves with your systems. These diagrams are generated from code,
      version-controlled, and automatically updated.
    </p>

    <!-- Architecture Philosophy -->
    <div class="mb-16 p-6 bg-gradient-to-br from-blue-50 to-purple-50 dark:from-blue-950/20 dark:to-purple-950/20 rounded-lg border border-blue-200 dark:border-blue-800">
      <h2 class="text-2xl font-bold mb-4">Why Architecture as Code?</h2>
      <div class="grid md:grid-cols-2 gap-6 text-gray-900 dark:text-gray-100">
        <div>
          <h3 class="font-semibold mb-2 text-blue-600 dark:text-blue-400">‚úì Always Up to Date</h3>
          <p class="text-sm">Diagrams live in the codebase and update with every change. No more outdated PowerPoints.</p>
        </div>
        <div>
          <h3 class="font-semibold mb-2 text-blue-600 dark:text-blue-400">‚úì Version Controlled</h3>
          <p class="text-sm">Track architecture evolution over time. See what changed, when, and why.</p>
        </div>
        <div>
          <h3 class="font-semibold mb-2 text-blue-600 dark:text-blue-400">‚úì Review & Collaborate</h3>
          <p class="text-sm">Architecture changes go through pull requests just like code. Team visibility built-in.</p>
        </div>
        <div>
          <h3 class="font-semibold mb-2 text-blue-600 dark:text-blue-400">‚úì Automated Publishing</h3>
          <p class="text-sm">Diagrams render automatically in CI/CD. Documentation deploys with every release.</p>
        </div>
      </div>
    </div>

    <!-- Example 1: Microservices Architecture -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-6">Example: Microservices Architecture</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        Event-driven microservices with Kafka. This Mermaid diagram shows service boundaries,
        data flow, and async communication patterns.
      </p>

      <div class="bg-white dark:bg-gray-900 p-6 rounded-lg border border-gray-200 dark:border-gray-800">
        <div class="mermaid-diagram mb-4">
          <pre class="mermaid bg-white dark:bg-gray-900 p-4 rounded overflow-x-auto">{microservicesDiagram}</pre>
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400">
          <strong>Source:</strong> <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">docs/architecture/examples/microservices.mmd</code>
        </div>
      </div>
    </section>

    <!-- Example 2: Data Pipeline Architecture -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-6">Example: Data Pipeline Architecture</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        Real-time and batch data processing pipeline. Shows data flow from ingestion through
        transformation to consumption.
      </p>

      <div class="bg-white dark:bg-gray-900 p-6 rounded-lg border border-gray-200 dark:border-gray-800">
        <div class="mermaid-diagram mb-4">
          <pre class="mermaid bg-white dark:bg-gray-900 p-4 rounded overflow-x-auto">{dataPipelineDiagram}</pre>
        </div>
        <div class="text-sm text-gray-600 dark:text-gray-400">
          <strong>Source:</strong> <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">docs/architecture/examples/data-pipeline.mmd</code>
        </div>
      </div>
    </section>

    <!-- Example 3: PlantUML C4 Model -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-6">PlantUML C4 Model Integration</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        For more formal architecture documentation, PlantUML with C4 model provides
        standardized component, container, and deployment views.
      </p>

      <PlantUMLDiagram code={orderServiceDiagram} alt="C4 Component Diagram - Order Service" client:visible />

      <div class="mt-6 p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
        <details class="cursor-pointer">
          <summary class="font-semibold text-sm mb-2">View PlantUML Source Code</summary>
          <pre class="text-xs overflow-x-auto bg-white dark:bg-gray-900 p-3 rounded mt-2"><code>{orderServiceDiagram}</code></pre>
        </details>
        <div class="mt-3 text-sm text-gray-600 dark:text-gray-400">
          <strong>Source:</strong> <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">docs/architecture/examples/order-service.puml</code>
        </div>
      </div>
    </section>

    <!-- Tools & Workflow -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-6">Tools & Workflow</h2>
      <div class="grid md:grid-cols-2 gap-6">
        <div class="p-6 bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800">
          <h3 class="text-xl font-semibold mb-3">üé® Mermaid</h3>
          <p class="text-gray-600 dark:text-gray-400 text-sm mb-3">
            Text-based diagrams that render in markdown. Perfect for flowcharts, sequence diagrams,
            and system architectures.
          </p>
          <ul class="text-sm text-gray-600 dark:text-gray-400 space-y-1">
            <li>‚úì Renders in GitHub, GitLab, VS Code</li>
            <li>‚úì No external dependencies needed</li>
            <li>‚úì Fast iteration and easy diffs</li>
          </ul>
        </div>

        <div class="p-6 bg-white dark:bg-gray-900 rounded-lg border border-gray-200 dark:border-gray-800">
          <h3 class="text-xl font-semibold mb-3">üèóÔ∏è PlantUML</h3>
          <p class="text-gray-600 dark:text-gray-400 text-sm mb-3">
            Industry-standard for UML and C4 model diagrams. Integrates with CI/CD for
            automated rendering.
          </p>
          <ul class="text-sm text-gray-600 dark:text-gray-400 space-y-1">
            <li>‚úì C4 model support for architecture</li>
            <li>‚úì Sequence, class, deployment diagrams</li>
            <li>‚úì CI/CD integration for auto-publish</li>
          </ul>
        </div>
      </div>
    </section>

    <!-- IaC Documentation Automation -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-6">Infrastructure as Code ‚Üí Diagrams</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        Generate PlantUML and Mermaid diagrams automatically from your Terraform, CloudFormation,
        or other IaC files using tools like inframap.
      </p>

      <div class="bg-white dark:bg-gray-900 p-6 rounded-lg border border-gray-200 dark:border-gray-800">
        <pre class="text-sm overflow-x-auto bg-gray-50 dark:bg-gray-800 p-4 rounded"><code>{`# Generate architecture diagrams from Terraform
$ inframap generate terraform/ | inframap prune | tee docs/infrastructure.puml

# Or generate Mermaid format
$ inframap generate --format mermaid terraform/ > docs/infrastructure.mmd

# Now your infrastructure diagrams stay in sync with your IaC!`}</code></pre>

        <div class="mt-4 p-4 bg-blue-50 dark:bg-blue-950/20 rounded border border-blue-200 dark:border-blue-800">
          <p class="text-sm text-gray-700 dark:text-gray-300">
            <strong>üí° Pro Tip:</strong> Run inframap in your CI pipeline whenever Terraform files change.
            The generated diagrams commit to your docs folder, keeping your architecture documentation
            automatically synchronized with your actual infrastructure.
          </p>
        </div>
      </div>
    </section>

    <!-- CI/CD Integration -->
    <section class="mb-16">
      <h2 class="text-3xl font-bold mb-6">Automated Documentation Pipeline</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        Every commit triggers diagram generation and documentation deployment to GitHub Pages.
      </p>

      <div class="bg-white dark:bg-gray-900 p-6 rounded-lg border border-gray-200 dark:border-gray-800">
        <pre class="text-sm overflow-x-auto bg-gray-50 dark:bg-gray-800 p-4 rounded"><code>{`# .github/workflows/docs.yml
name: Generate Architecture Docs

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
      - '!docs/**'  # Ignore generated docs to avoid infinite loops

jobs:
  generate-diagrams:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Install required tools
      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.21'

      - name: Install inframap
        run: go install github.com/cycloidio/inframap@latest

      - name: Install PlantUML
        run: |
          sudo apt-get update
          sudo apt-get install -y plantuml

      # Generate diagrams from IaC
      - name: Generate diagrams from Terraform
        run: |
          inframap generate terraform/ --format puml > docs/infrastructure.puml
          inframap generate terraform/ --format mermaid > docs/infrastructure.mmd

      # Render PlantUML to images
      - name: Generate PlantUML diagrams
        run: plantuml -tpng docs/**/*.puml

      # Commit generated diagrams
      - name: Commit diagram updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add docs/
          git diff --quiet && git diff --staged --quiet || git commit -m "docs: update architecture diagrams"
          git push

      # Deploy to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: \${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs`}</code></pre>
      </div>
    </section>

    <!-- Call to Action -->
    <div class="p-8 bg-gray-50 dark:bg-gray-900/50 rounded-lg border border-gray-200 dark:border-gray-800 text-center">
      <h2 class="text-2xl font-bold mb-4">Want to See More?</h2>
      <p class="text-gray-600 dark:text-gray-400 mb-6">
        I can help you implement architecture as code practices in your organization.
        From tooling setup to CI/CD integration and team training.
      </p>
      <a href="/contact"
         class="inline-block px-8 py-3 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
        Let's Talk Architecture
      </a>
    </div>
  </div>

  <script>
    // Dynamically import Mermaid only when diagrams are in viewport
    let mermaidLoaded = false;

    const loadAndInitMermaid = async () => {
      if (mermaidLoaded) return;
      mermaidLoaded = true;

      const { default: mermaid } = await import('mermaid');

      const isDark = document.documentElement.classList.contains('dark');

      mermaid.initialize({
        startOnLoad: false,
        theme: isDark ? 'dark' : 'default',
        themeVariables: {
          darkMode: isDark,
        },
        securityLevel: 'loose',
        fontFamily: 'ui-sans-serif, system-ui, sans-serif',
      });

      // Run mermaid on all .mermaid elements
      await mermaid.run({
        querySelector: 'pre.mermaid',
      });
    };

    // Use Intersection Observer to load Mermaid only when diagrams are visible
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          loadAndInitMermaid();
          observer.disconnect();
        }
      });
    }, { rootMargin: '50px' });

    // Observe the first mermaid diagram
    const firstDiagram = document.querySelector('pre.mermaid');
    if (firstDiagram) {
      observer.observe(firstDiagram);
    }

    // Re-render when theme changes (only if mermaid is already loaded)
    const themeObserver = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.attributeName === 'class' && mermaidLoaded) {
          // Reset and re-render all diagrams
          document.querySelectorAll('.mermaid-container').forEach(el => {
            const pre = document.createElement('pre');
            pre.className = 'mermaid bg-white dark:bg-gray-900 p-4 rounded overflow-x-auto';
            pre.textContent = el.dataset.mermaidCode;
            el.replaceWith(pre);
          });
          setTimeout(loadAndInitMermaid, 100);
        }
      });
    });

    themeObserver.observe(document.documentElement, {
      attributes: true,
      attributeFilter: ['class'],
    });
  </script>
</Layout>
