name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  check-changes:
    runs-on: ubuntu-latest
    outputs:
      source-changed: ${{ steps.changes.outputs.source }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check for source changes
        id: changes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "source=true" >> $GITHUB_OUTPUT
          else
            # Check if any files changed outside of docs/ and *.md files
            git diff --name-only ${{ github.event.before }} ${{ github.sha }} > changed_files.txt
            if grep -v -E '^(docs/|.*\.md$|CONTRIBUTING\.md|DEVELOPMENT\.md|DEPLOYMENT\.md|README\.md)' changed_files.txt; then
              echo "source=true" >> $GITHUB_OUTPUT
              echo "Source code changes detected"
            else
              echo "source=false" >> $GITHUB_OUTPUT
              echo "Only documentation changes detected"
            fi
          fi

  ci:
    runs-on: ubuntu-latest
    needs: check-changes

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install dependencies
        run: npm ci

      - name: Validate commit messages
        if: github.event_name == 'push'
        run: npx commitlint --from HEAD~1 --to HEAD --verbose

      - name: Validate PR commits
        if: github.event_name == 'pull_request'
        run: npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Run tests
        run: npm test -- --run

      - name: Build project
        run: npm run build

      - name: Run Lighthouse CI
        run: npm run lighthouse
        continue-on-error: true
        env:
          LHCI_BUILD_CONTEXT__CURRENT_HASH: ${{ github.sha }}

      - name: Upload Lighthouse results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lighthouse-results
          path: .lighthouseci
          retention-days: 30
          if-no-files-found: ignore

      - name: Update performance.md with Lighthouse scores
        if: success()
        run: node scripts/update-lighthouse-scores.js

  build-docs:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: ci
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.x'

      - name: Install Node dependencies
        run: npm ci

      - name: Install MkDocs and dependencies
        run: |
          pip install mkdocs-material
          pip install mkdocstrings
          pip install pymdown-extensions

      - name: Install Graphviz and PlantUML dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y graphviz default-jre

      - name: Download PlantUML
        run: |
          wget https://github.com/plantuml/plantuml/releases/download/v1.2024.3/plantuml-1.2024.3.jar -O plantuml.jar

      - name: Generate architecture documentation
        run: npm run docs:arch

      - name: Generate SVG dependency graph
        run: npm run deps:graph || true

      - name: Generate PlantUML diagrams (PNG)
        run: |
          if [ -d "docs/architecture/generated" ]; then
            find docs/architecture/generated -name "*.puml" -exec java -jar plantuml.jar -tpng {} \;
          fi
          if [ -d "docs/architecture/examples" ]; then
            find docs/architecture/examples -name "*.puml" -exec java -jar plantuml.jar -tpng {} \;
          fi
        continue-on-error: true

      - name: Generate PlantUML diagrams (SVG)
        run: |
          if [ -d "docs/architecture/generated" ]; then
            find docs/architecture/generated -name "*.puml" -exec java -jar plantuml.jar -tsvg {} \;
          fi
          if [ -d "docs/architecture/examples" ]; then
            find docs/architecture/examples -name "*.puml" -exec java -jar plantuml.jar -tsvg {} \;
          fi
        continue-on-error: true

      - name: Install Chromium dependencies for Mermaid
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libnss3 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libxkbcommon0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            libgbm1 \
            libasound2t64

      - name: Generate Mermaid diagrams (SVG)
        run: |
          npm install -g @mermaid-js/mermaid-cli
          echo "Checking for .mmd files in docs/architecture/generated:"
          ls -la docs/architecture/generated/*.mmd 2>/dev/null || echo "No .mmd files found"
          if [ -d "docs/architecture/generated" ]; then
            for file in docs/architecture/generated/*.mmd; do
              if [ -f "$file" ]; then
                echo "Generating SVG for: $file"
                mmdc -i "$file" -o "${file}.svg" -t neutral -b transparent --puppeteerConfigFile ./config/puppeteer-config.json && echo "✓ Generated ${file}.svg" || echo "✗ Failed to generate ${file}.svg"
              fi
            done
          fi
          if [ -d "docs/architecture/examples" ]; then
            for file in docs/architecture/examples/*.mmd; do
              if [ -f "$file" ]; then
                echo "Generating SVG for: $file"
                mmdc -i "$file" -o "${file}.svg" -t neutral -b transparent --puppeteerConfigFile ./config/puppeteer-config.json && echo "✓ Generated ${file}.svg" || echo "✗ Failed to generate ${file}.svg"
              fi
            done
          fi
        continue-on-error: true

      - name: Copy generated diagrams to docs
        run: |
          mkdir -p docs/images/architecture
          # List what we have
          echo "Contents of docs/architecture/generated:"
          ls -la docs/architecture/generated/ || true
          # Copy Mermaid SVG files
          if [ -d "docs/architecture/generated" ]; then
            cp -v docs/architecture/generated/*.mmd.svg docs/images/architecture/ 2>/dev/null || echo "No .mmd.svg files found in generated/"
            cp -v docs/architecture/generated/*.png docs/images/architecture/ 2>/dev/null || echo "No .png files found in generated/"
            cp -v docs/architecture/generated/*.svg docs/images/architecture/ 2>/dev/null || echo "No .svg files found in generated/"
          fi
          if [ -d "docs/architecture/examples" ]; then
            cp -v docs/architecture/examples/*.mmd.svg docs/images/architecture/ 2>/dev/null || echo "No .mmd.svg files found in examples/"
            cp -v docs/architecture/examples/*.png docs/images/architecture/ 2>/dev/null || echo "No .png files found in examples/"
            cp -v docs/architecture/examples/*.svg docs/images/architecture/ 2>/dev/null || echo "No .svg files found in examples/"
          fi
          # Show what we copied
          echo "Contents of docs/images/architecture:"
          ls -la docs/images/architecture/ || true

      - name: Build MkDocs site
        run: mkdocs build --strict

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
